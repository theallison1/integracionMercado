package com.mercadopago.sample.config;

import com.mercadopago.sample.service.MercadoPagoStoreService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;

@Component
public class MercadoPagoInitializer {
    
    @Autowired
    private MercadoPagoStoreService storeService;
    
    private static final Logger LOGGER = LoggerFactory.getLogger(MercadoPagoInitializer.class);
    
    @EventListener(ApplicationReadyEvent.class)
    public void initializeMercadoPago() {
        try {
            LOGGER.info("üöÄ Inicializando configuraci√≥n de Mercado Pago para E-COMMERCE...");
            
            // ‚úÖ EXPL√çCITAMENTE definir que somos E-COMMERCE
            LOGGER.info("üì± Tipo de integraci√≥n: E-COMMERCE (Millenium Termotanques Online)");
            LOGGER.info("üõí Producto: Termotanques y productos para el hogar");
            LOGGER.info("üåê Canal: Tienda online - NO POS/PDV f√≠sico");
            LOGGER.info("üí≥ M√©todos: Payment Brick, Wallet Brick - NO QR f√≠sico");
            
            // ‚úÖ CREAR CONFIGURACI√ìN B√ÅSICA (versi√≥n simplificada)
            String storeId = storeService.createStore("Millenium Online", "millenium-online", "Online");
            if (storeId != null) {
                storeService.createPOS(storeId, "millenium-pos-online", "POS Online", false);
            }
            
            LOGGER.info("‚úÖ Configuraci√≥n E-COMMERCE lista - Store: {}, POS: {}", storeId, "millenium-pos-online");
            
        } catch (Exception e) {
            LOGGER.warn("‚ö†Ô∏è Configuraci√≥n autom√°tica de Mercado Pago no pudo completarse: {}", e.getMessage());
        }
    }
}
